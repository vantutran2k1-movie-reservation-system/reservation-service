// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/city_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/city_repository.go -destination=app/mocks/mock_repositories/city_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	payloads "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/payloads"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCityRepository is a mock of CityRepository interface.
type MockCityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCityRepositoryMockRecorder
}

// MockCityRepositoryMockRecorder is the mock recorder for MockCityRepository.
type MockCityRepositoryMockRecorder struct {
	mock *MockCityRepository
}

// NewMockCityRepository creates a new mock instance.
func NewMockCityRepository(ctrl *gomock.Controller) *MockCityRepository {
	mock := &MockCityRepository{ctrl: ctrl}
	mock.recorder = &MockCityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityRepository) EXPECT() *MockCityRepositoryMockRecorder {
	return m.recorder
}

// CreateCity mocks base method.
func (m *MockCityRepository) CreateCity(tx *gorm.DB, city *models.City) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCity", tx, city)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCity indicates an expected call of CreateCity.
func (mr *MockCityRepositoryMockRecorder) CreateCity(tx, city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCity", reflect.TypeOf((*MockCityRepository)(nil).CreateCity), tx, city)
}

// GetCities mocks base method.
func (m *MockCityRepository) GetCities(filter payloads.GetCitiesFilter) ([]*models.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCitiesByState", filter)
	ret0, _ := ret[0].([]*models.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCities indicates an expected call of GetCities.
func (mr *MockCityRepositoryMockRecorder) GetCities(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCitiesByState", reflect.TypeOf((*MockCityRepository)(nil).GetCities), filter)
}

// GetCity mocks base method.
func (m *MockCityRepository) GetCity(filter payloads.GetCityFilter) (*models.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCity", filter)
	ret0, _ := ret[0].(*models.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCity indicates an expected call of GetCity.
func (mr *MockCityRepositoryMockRecorder) GetCity(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCity", reflect.TypeOf((*MockCityRepository)(nil).GetCity), filter)
}

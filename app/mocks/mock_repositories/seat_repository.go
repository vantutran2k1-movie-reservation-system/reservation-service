// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/seat_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/seat_repository.go -destination=app/mocks/mock_repositories/seat_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	filters "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/filters"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSeatRepository is a mock of SeatRepository interface.
type MockSeatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSeatRepositoryMockRecorder
}

// MockSeatRepositoryMockRecorder is the mock recorder for MockSeatRepository.
type MockSeatRepositoryMockRecorder struct {
	mock *MockSeatRepository
}

// NewMockSeatRepository creates a new mock instance.
func NewMockSeatRepository(ctrl *gomock.Controller) *MockSeatRepository {
	mock := &MockSeatRepository{ctrl: ctrl}
	mock.recorder = &MockSeatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatRepository) EXPECT() *MockSeatRepositoryMockRecorder {
	return m.recorder
}

// CreateSeat mocks base method.
func (m *MockSeatRepository) CreateSeat(tx *gorm.DB, seat *models.Seat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeat", tx, seat)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeat indicates an expected call of CreateSeat.
func (mr *MockSeatRepositoryMockRecorder) CreateSeat(tx, seat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeat", reflect.TypeOf((*MockSeatRepository)(nil).CreateSeat), tx, seat)
}

// GetSeat mocks base method.
func (m *MockSeatRepository) GetSeat(filter filters.SeatFilter) (*models.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeat", filter)
	ret0, _ := ret[0].(*models.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeat indicates an expected call of GetSeat.
func (mr *MockSeatRepositoryMockRecorder) GetSeat(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeat", reflect.TypeOf((*MockSeatRepository)(nil).GetSeat), filter)
}

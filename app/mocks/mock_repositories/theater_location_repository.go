// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/theater_location_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/theater_location_repository.go -destination=app/mocks/mock_repositories/theater_location_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTheaterLocationRepository is a mock of TheaterLocationRepository interface.
type MockTheaterLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTheaterLocationRepositoryMockRecorder
}

// MockTheaterLocationRepositoryMockRecorder is the mock recorder for MockTheaterLocationRepository.
type MockTheaterLocationRepositoryMockRecorder struct {
	mock *MockTheaterLocationRepository
}

// NewMockTheaterLocationRepository creates a new mock instance.
func NewMockTheaterLocationRepository(ctrl *gomock.Controller) *MockTheaterLocationRepository {
	mock := &MockTheaterLocationRepository{ctrl: ctrl}
	mock.recorder = &MockTheaterLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTheaterLocationRepository) EXPECT() *MockTheaterLocationRepositoryMockRecorder {
	return m.recorder
}

// CreateTheaterLocation mocks base method.
func (m *MockTheaterLocationRepository) CreateTheaterLocation(tx *gorm.DB, location *models.TheaterLocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTheaterLocation", tx, location)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTheaterLocation indicates an expected call of CreateTheaterLocation.
func (mr *MockTheaterLocationRepositoryMockRecorder) CreateTheaterLocation(tx, location any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTheaterLocation", reflect.TypeOf((*MockTheaterLocationRepository)(nil).CreateTheaterLocation), tx, location)
}

// GetLocationByTheaterID mocks base method.
func (m *MockTheaterLocationRepository) GetLocationByTheaterID(theaterId uuid.UUID) (*models.TheaterLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByTheaterID", theaterId)
	ret0, _ := ret[0].(*models.TheaterLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByTheaterID indicates an expected call of GetLocationByTheaterID.
func (mr *MockTheaterLocationRepositoryMockRecorder) GetLocationByTheaterID(theaterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByTheaterID", reflect.TypeOf((*MockTheaterLocationRepository)(nil).GetLocationByTheaterID), theaterId)
}

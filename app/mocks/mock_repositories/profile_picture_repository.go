// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/profile_picture_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/profile_picture_repository.go -destination=app/mocks/mock_repositories/profile_picture_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProfilePictureRepository is a mock of ProfilePictureRepository interface.
type MockProfilePictureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProfilePictureRepositoryMockRecorder
}

// MockProfilePictureRepositoryMockRecorder is the mock recorder for MockProfilePictureRepository.
type MockProfilePictureRepositoryMockRecorder struct {
	mock *MockProfilePictureRepository
}

// NewMockProfilePictureRepository creates a new mock instance.
func NewMockProfilePictureRepository(ctrl *gomock.Controller) *MockProfilePictureRepository {
	mock := &MockProfilePictureRepository{ctrl: ctrl}
	mock.recorder = &MockProfilePictureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfilePictureRepository) EXPECT() *MockProfilePictureRepositoryMockRecorder {
	return m.recorder
}

// BucketExists mocks base method.
func (m *MockProfilePictureRepository) BucketExists(bucketName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BucketExists", bucketName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// BucketExists indicates an expected call of BucketExists.
func (mr *MockProfilePictureRepositoryMockRecorder) BucketExists(bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BucketExists", reflect.TypeOf((*MockProfilePictureRepository)(nil).BucketExists), bucketName)
}

// CreateBucket mocks base method.
func (m *MockProfilePictureRepository) CreateBucket(bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBucket", bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBucket indicates an expected call of CreateBucket.
func (mr *MockProfilePictureRepositoryMockRecorder) CreateBucket(bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBucket", reflect.TypeOf((*MockProfilePictureRepository)(nil).CreateBucket), bucketName)
}

// CreateProfilePicture mocks base method.
func (m *MockProfilePictureRepository) CreateProfilePicture(file *multipart.FileHeader, bucketName, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfilePicture", file, bucketName, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfilePicture indicates an expected call of CreateProfilePicture.
func (mr *MockProfilePictureRepositoryMockRecorder) CreateProfilePicture(file, bucketName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfilePicture", reflect.TypeOf((*MockProfilePictureRepository)(nil).CreateProfilePicture), file, bucketName, name)
}

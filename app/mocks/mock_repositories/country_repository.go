// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/country_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/country_repository.go -destination=app/mocks/mock_repositories/country_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCountryRepository is a mock of CountryRepository interface.
type MockCountryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountryRepositoryMockRecorder
}

// MockCountryRepositoryMockRecorder is the mock recorder for MockCountryRepository.
type MockCountryRepositoryMockRecorder struct {
	mock *MockCountryRepository
}

// NewMockCountryRepository creates a new mock instance.
func NewMockCountryRepository(ctrl *gomock.Controller) *MockCountryRepository {
	mock := &MockCountryRepository{ctrl: ctrl}
	mock.recorder = &MockCountryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryRepository) EXPECT() *MockCountryRepositoryMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method.
func (m *MockCountryRepository) CreateCountry(tx *gorm.DB, country *models.Country) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", tx, country)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockCountryRepositoryMockRecorder) CreateCountry(tx, country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockCountryRepository)(nil).CreateCountry), tx, country)
}

// GetCountries mocks base method.
func (m *MockCountryRepository) GetCountries() ([]*models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries")
	ret0, _ := ret[0].([]*models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockCountryRepositoryMockRecorder) GetCountries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockCountryRepository)(nil).GetCountries))
}

// GetCountry mocks base method.
func (m *MockCountryRepository) GetCountry(id uuid.UUID) (*models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountry", id)
	ret0, _ := ret[0].(*models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountry indicates an expected call of GetCountry.
func (mr *MockCountryRepositoryMockRecorder) GetCountry(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountry", reflect.TypeOf((*MockCountryRepository)(nil).GetCountry), id)
}

// GetCountryByCode mocks base method.
func (m *MockCountryRepository) GetCountryByCode(code string) (*models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByCode", code)
	ret0, _ := ret[0].(*models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByCode indicates an expected call of GetCountryByCode.
func (mr *MockCountryRepositoryMockRecorder) GetCountryByCode(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByCode", reflect.TypeOf((*MockCountryRepository)(nil).GetCountryByCode), code)
}

// GetCountryByName mocks base method.
func (m *MockCountryRepository) GetCountryByName(name string) (*models.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByName", name)
	ret0, _ := ret[0].(*models.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByName indicates an expected call of GetCountryByName.
func (mr *MockCountryRepositoryMockRecorder) GetCountryByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByName", reflect.TypeOf((*MockCountryRepository)(nil).GetCountryByName), name)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/feature_flag_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/feature_flag_repository.go -destination=app/mocks/mock_repositories/feature_flag_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeatureFlagRepository is a mock of FeatureFlagRepository interface.
type MockFeatureFlagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagRepositoryMockRecorder
}

// MockFeatureFlagRepositoryMockRecorder is the mock recorder for MockFeatureFlagRepository.
type MockFeatureFlagRepositoryMockRecorder struct {
	mock *MockFeatureFlagRepository
}

// NewMockFeatureFlagRepository creates a new mock instance.
func NewMockFeatureFlagRepository(ctrl *gomock.Controller) *MockFeatureFlagRepository {
	mock := &MockFeatureFlagRepository{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlagRepository) EXPECT() *MockFeatureFlagRepositoryMockRecorder {
	return m.recorder
}

// HasFlagEnabled mocks base method.
func (m *MockFeatureFlagRepository) HasFlagEnabled(email, flagName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasFlagEnabled", email, flagName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasFlagEnabled indicates an expected call of HasFlagEnabled.
func (mr *MockFeatureFlagRepositoryMockRecorder) HasFlagEnabled(email, flagName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasFlagEnabled", reflect.TypeOf((*MockFeatureFlagRepository)(nil).HasFlagEnabled), email, flagName)
}

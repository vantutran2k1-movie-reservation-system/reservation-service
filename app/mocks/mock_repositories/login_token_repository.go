// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/login_token_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/login_token_repository.go -destination=app/mocks/mock_repositories/login_token_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	filters "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/filters"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockLoginTokenRepository is a mock of LoginTokenRepository interface.
type MockLoginTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginTokenRepositoryMockRecorder
}

// MockLoginTokenRepositoryMockRecorder is the mock recorder for MockLoginTokenRepository.
type MockLoginTokenRepositoryMockRecorder struct {
	mock *MockLoginTokenRepository
}

// NewMockLoginTokenRepository creates a new mock instance.
func NewMockLoginTokenRepository(ctrl *gomock.Controller) *MockLoginTokenRepository {
	mock := &MockLoginTokenRepository{ctrl: ctrl}
	mock.recorder = &MockLoginTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginTokenRepository) EXPECT() *MockLoginTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateLoginToken mocks base method.
func (m *MockLoginTokenRepository) CreateLoginToken(tx *gorm.DB, loginToken *models.LoginToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginToken", tx, loginToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoginToken indicates an expected call of CreateLoginToken.
func (mr *MockLoginTokenRepositoryMockRecorder) CreateLoginToken(tx, loginToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginToken", reflect.TypeOf((*MockLoginTokenRepository)(nil).CreateLoginToken), tx, loginToken)
}

// GetLoginToken mocks base method.
func (m *MockLoginTokenRepository) GetLoginToken(filter filters.LoginTokenFilter) (*models.LoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginToken", filter)
	ret0, _ := ret[0].(*models.LoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoginToken indicates an expected call of GetLoginToken.
func (mr *MockLoginTokenRepositoryMockRecorder) GetLoginToken(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginToken", reflect.TypeOf((*MockLoginTokenRepository)(nil).GetLoginToken), filter)
}

// RevokeLoginToken mocks base method.
func (m *MockLoginTokenRepository) RevokeLoginToken(tx *gorm.DB, loginToken *models.LoginToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeLoginToken", tx, loginToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeLoginToken indicates an expected call of RevokeLoginToken.
func (mr *MockLoginTokenRepositoryMockRecorder) RevokeLoginToken(tx, loginToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeLoginToken", reflect.TypeOf((*MockLoginTokenRepository)(nil).RevokeLoginToken), tx, loginToken)
}

// RevokeUserLoginTokens mocks base method.
func (m *MockLoginTokenRepository) RevokeUserLoginTokens(tx *gorm.DB, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserLoginTokens", tx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserLoginTokens indicates an expected call of RevokeUserLoginTokens.
func (mr *MockLoginTokenRepositoryMockRecorder) RevokeUserLoginTokens(tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserLoginTokens", reflect.TypeOf((*MockLoginTokenRepository)(nil).RevokeUserLoginTokens), tx, userID)
}

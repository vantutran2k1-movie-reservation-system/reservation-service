// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/password_reset_token_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/password_reset_token_repository.go -destination=app/mocks/mock_repositories/password_reset_token_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	filters "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/filters"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPasswordResetTokenRepository is a mock of PasswordResetTokenRepository interface.
type MockPasswordResetTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordResetTokenRepositoryMockRecorder
}

// MockPasswordResetTokenRepositoryMockRecorder is the mock recorder for MockPasswordResetTokenRepository.
type MockPasswordResetTokenRepositoryMockRecorder struct {
	mock *MockPasswordResetTokenRepository
}

// NewMockPasswordResetTokenRepository creates a new mock instance.
func NewMockPasswordResetTokenRepository(ctrl *gomock.Controller) *MockPasswordResetTokenRepository {
	mock := &MockPasswordResetTokenRepository{ctrl: ctrl}
	mock.recorder = &MockPasswordResetTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordResetTokenRepository) EXPECT() *MockPasswordResetTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockPasswordResetTokenRepository) CreateToken(tx *gorm.DB, token *models.PasswordResetToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", tx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockPasswordResetTokenRepositoryMockRecorder) CreateToken(tx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockPasswordResetTokenRepository)(nil).CreateToken), tx, token)
}

// GetToken mocks base method.
func (m *MockPasswordResetTokenRepository) GetToken(filter filters.PasswordResetTokenFilter) (*models.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", filter)
	ret0, _ := ret[0].(*models.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockPasswordResetTokenRepositoryMockRecorder) GetToken(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockPasswordResetTokenRepository)(nil).GetToken), filter)
}

// GetTokens mocks base method.
func (m *MockPasswordResetTokenRepository) GetTokens(filter filters.PasswordResetTokenFilter) ([]*models.PasswordResetToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens", filter)
	ret0, _ := ret[0].([]*models.PasswordResetToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokens indicates an expected call of GetTokens.
func (mr *MockPasswordResetTokenRepositoryMockRecorder) GetTokens(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockPasswordResetTokenRepository)(nil).GetTokens), filter)
}

// RevokeTokens mocks base method.
func (m *MockPasswordResetTokenRepository) RevokeTokens(tx *gorm.DB, tokens []*models.PasswordResetToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeTokens", tx, tokens)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeTokens indicates an expected call of RevokeTokens.
func (mr *MockPasswordResetTokenRepositoryMockRecorder) RevokeTokens(tx, tokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeTokens", reflect.TypeOf((*MockPasswordResetTokenRepository)(nil).RevokeTokens), tx, tokens)
}

// UseToken mocks base method.
func (m *MockPasswordResetTokenRepository) UseToken(tx *gorm.DB, token *models.PasswordResetToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseToken", tx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseToken indicates an expected call of UseToken.
func (mr *MockPasswordResetTokenRepositoryMockRecorder) UseToken(tx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseToken", reflect.TypeOf((*MockPasswordResetTokenRepository)(nil).UseToken), tx, token)
}

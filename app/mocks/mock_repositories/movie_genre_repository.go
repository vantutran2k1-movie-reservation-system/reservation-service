// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/movie_genre_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/movie_genre_repository.go -destination=app/mocks/mock_repositories/movie_genre_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMovieGenreRepository is a mock of MovieGenreRepository interface.
type MockMovieGenreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMovieGenreRepositoryMockRecorder
}

// MockMovieGenreRepositoryMockRecorder is the mock recorder for MockMovieGenreRepository.
type MockMovieGenreRepositoryMockRecorder struct {
	mock *MockMovieGenreRepository
}

// NewMockMovieGenreRepository creates a new mock instance.
func NewMockMovieGenreRepository(ctrl *gomock.Controller) *MockMovieGenreRepository {
	mock := &MockMovieGenreRepository{ctrl: ctrl}
	mock.recorder = &MockMovieGenreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieGenreRepository) EXPECT() *MockMovieGenreRepositoryMockRecorder {
	return m.recorder
}

// UpdateGenresOfMovie mocks base method.
func (m *MockMovieGenreRepository) UpdateGenresOfMovie(tx *gorm.DB, movieID uuid.UUID, genreIDs []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenresOfMovie", tx, movieID, genreIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenresOfMovie indicates an expected call of UpdateGenresOfMovie.
func (mr *MockMovieGenreRepositoryMockRecorder) UpdateGenresOfMovie(tx, movieID, genreIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenresOfMovie", reflect.TypeOf((*MockMovieGenreRepository)(nil).UpdateGenresOfMovie), tx, movieID, genreIDs)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/notification_repository.go
//
// Generated by this command:
//
//	mockgen -source=app/repositories/notification_repository.go -destination=app/mocks/mock_repositories/notification_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	payloads "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/payloads"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// SendUserRegistrationEvent mocks base method.
func (m *MockNotificationRepository) SendUserRegistrationEvent(event payloads.UserRegistrationEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUserRegistrationEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUserRegistrationEvent indicates an expected call of SendUserRegistrationEvent.
func (mr *MockNotificationRepositoryMockRecorder) SendUserRegistrationEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUserRegistrationEvent", reflect.TypeOf((*MockNotificationRepository)(nil).SendUserRegistrationEvent), event)
}

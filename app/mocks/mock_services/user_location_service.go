// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/user_location_service.go
//
// Generated by this command:
//
//	mockgen -source=app/services/user_location_service.go -destination=app/mocks/mock_services/user_location_service.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	errors "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/errors"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserLocationService is a mock of UserLocationService interface.
type MockUserLocationService struct {
	ctrl     *gomock.Controller
	recorder *MockUserLocationServiceMockRecorder
}

// MockUserLocationServiceMockRecorder is the mock recorder for MockUserLocationService.
type MockUserLocationServiceMockRecorder struct {
	mock *MockUserLocationService
}

// NewMockUserLocationService creates a new mock instance.
func NewMockUserLocationService(ctrl *gomock.Controller) *MockUserLocationService {
	mock := &MockUserLocationService{ctrl: ctrl}
	mock.recorder = &MockUserLocationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLocationService) EXPECT() *MockUserLocationServiceMockRecorder {
	return m.recorder
}

// GetCurrentUserLocation mocks base method.
func (m *MockUserLocationService) GetCurrentUserLocation() (*models.UserLocation, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserLocation")
	ret0, _ := ret[0].(*models.UserLocation)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// GetCurrentUserLocation indicates an expected call of GetCurrentUserLocation.
func (mr *MockUserLocationServiceMockRecorder) GetCurrentUserLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserLocation", reflect.TypeOf((*MockUserLocationService)(nil).GetCurrentUserLocation))
}

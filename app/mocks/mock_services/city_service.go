// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/city_service.go
//
// Generated by this command:
//
//	mockgen -source=app/services/city_service.go -destination=app/mocks/mock_services/city_service.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	errors "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/errors"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCityService is a mock of CityService interface.
type MockCityService struct {
	ctrl     *gomock.Controller
	recorder *MockCityServiceMockRecorder
}

// MockCityServiceMockRecorder is the mock recorder for MockCityService.
type MockCityServiceMockRecorder struct {
	mock *MockCityService
}

// NewMockCityService creates a new mock instance.
func NewMockCityService(ctrl *gomock.Controller) *MockCityService {
	mock := &MockCityService{ctrl: ctrl}
	mock.recorder = &MockCityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityService) EXPECT() *MockCityServiceMockRecorder {
	return m.recorder
}

// CreateCity mocks base method.
func (m *MockCityService) CreateCity(countryID, stateID uuid.UUID, name string) (*models.City, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCity", countryID, stateID, name)
	ret0, _ := ret[0].(*models.City)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// CreateCity indicates an expected call of CreateCity.
func (mr *MockCityServiceMockRecorder) CreateCity(countryID, stateID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCity", reflect.TypeOf((*MockCityService)(nil).CreateCity), countryID, stateID, name)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/country_service.go
//
// Generated by this command:
//
//	mockgen -source=app/services/country_service.go -destination=app/mocks/mock_services/country_service.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	errors "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/errors"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCountryService is a mock of CountryService interface.
type MockCountryService struct {
	ctrl     *gomock.Controller
	recorder *MockCountryServiceMockRecorder
}

// MockCountryServiceMockRecorder is the mock recorder for MockCountryService.
type MockCountryServiceMockRecorder struct {
	mock *MockCountryService
}

// NewMockCountryService creates a new mock instance.
func NewMockCountryService(ctrl *gomock.Controller) *MockCountryService {
	mock := &MockCountryService{ctrl: ctrl}
	mock.recorder = &MockCountryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryService) EXPECT() *MockCountryServiceMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method.
func (m *MockCountryService) CreateCountry(name, code string) (*models.Country, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", name, code)
	ret0, _ := ret[0].(*models.Country)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockCountryServiceMockRecorder) CreateCountry(name, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockCountryService)(nil).CreateCountry), name, code)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/location_service.go
//
// Generated by this command:
//
//	mockgen -source=app/services/location_service.go -destination=app/mocks/mock_services/location_service.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	errors "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/errors"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	payloads "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/payloads"
	gomock "go.uber.org/mock/gomock"
)

// MockLocationService is a mock of LocationService interface.
type MockLocationService struct {
	ctrl     *gomock.Controller
	recorder *MockLocationServiceMockRecorder
}

// MockLocationServiceMockRecorder is the mock recorder for MockLocationService.
type MockLocationServiceMockRecorder struct {
	mock *MockLocationService
}

// NewMockLocationService creates a new mock instance.
func NewMockLocationService(ctrl *gomock.Controller) *MockLocationService {
	mock := &MockLocationService{ctrl: ctrl}
	mock.recorder = &MockLocationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationService) EXPECT() *MockLocationServiceMockRecorder {
	return m.recorder
}

// CreateCity mocks base method.
func (m *MockLocationService) CreateCity(countryID, stateID uuid.UUID, req payloads.CreateCityRequest) (*models.City, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCity", countryID, stateID, req)
	ret0, _ := ret[0].(*models.City)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// CreateCity indicates an expected call of CreateCity.
func (mr *MockLocationServiceMockRecorder) CreateCity(countryID, stateID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCity", reflect.TypeOf((*MockLocationService)(nil).CreateCity), countryID, stateID, req)
}

// CreateCountry mocks base method.
func (m *MockLocationService) CreateCountry(req payloads.CreateCountryRequest) (*models.Country, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", req)
	ret0, _ := ret[0].(*models.Country)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockLocationServiceMockRecorder) CreateCountry(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockLocationService)(nil).CreateCountry), req)
}

// CreateState mocks base method.
func (m *MockLocationService) CreateState(countryID uuid.UUID, req payloads.CreateStateRequest) (*models.State, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateState", countryID, req)
	ret0, _ := ret[0].(*models.State)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// CreateState indicates an expected call of CreateState.
func (mr *MockLocationServiceMockRecorder) CreateState(countryID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateState", reflect.TypeOf((*MockLocationService)(nil).CreateState), countryID, req)
}

// GetCountries mocks base method.
func (m *MockLocationService) GetCountries() ([]*models.Country, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries")
	ret0, _ := ret[0].([]*models.Country)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockLocationServiceMockRecorder) GetCountries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockLocationService)(nil).GetCountries))
}

// GetStatesByCountry mocks base method.
func (m *MockLocationService) GetStatesByCountry(countryID uuid.UUID) ([]*models.State, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatesByCountry", countryID)
	ret0, _ := ret[0].([]*models.State)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// GetStatesByCountry indicates an expected call of GetStatesByCountry.
func (mr *MockLocationServiceMockRecorder) GetStatesByCountry(countryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatesByCountry", reflect.TypeOf((*MockLocationService)(nil).GetStatesByCountry), countryID)
}

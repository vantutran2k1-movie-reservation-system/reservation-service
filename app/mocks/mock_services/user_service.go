// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/user_service.go
//
// Generated by this command:
//
//	mockgen -source=app/services/user_service.go -destination=app/mocks/mock_services/user_service.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	errors "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/errors"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserService) CreateUser(email, password string) (*models.User, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, password)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserServiceMockRecorder) CreateUser(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserService)(nil).CreateUser), email, password)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(userID uuid.UUID) (*models.User, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), userID)
}

// LoginUser mocks base method.
func (m *MockUserService) LoginUser(email, password string) (*models.LoginToken, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", email, password)
	ret0, _ := ret[0].(*models.LoginToken)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserServiceMockRecorder) LoginUser(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserService)(nil).LoginUser), email, password)
}

// LogoutUser mocks base method.
func (m *MockUserService) LogoutUser(tokenValue string) *errors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUser", tokenValue)
	ret0, _ := ret[0].(*errors.ApiError)
	return ret0
}

// LogoutUser indicates an expected call of LogoutUser.
func (mr *MockUserServiceMockRecorder) LogoutUser(tokenValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUser", reflect.TypeOf((*MockUserService)(nil).LogoutUser), tokenValue)
}

// UpdateUserPassword mocks base method.
func (m *MockUserService) UpdateUserPassword(userID uuid.UUID, password string) *errors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", userID, password)
	ret0, _ := ret[0].(*errors.ApiError)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserServiceMockRecorder) UpdateUserPassword(userID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserService)(nil).UpdateUserPassword), userID, password)
}

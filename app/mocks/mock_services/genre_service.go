// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/genre_service.go
//
// Generated by this command:
//
//	mockgen -source=app/services/genre_service.go -destination=app/mocks/mock_services/genre_service.go -package=mock_services
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	errors "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/errors"
	models "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/models"
	payloads "github.com/vantutran2k1-movie-reservation-system/reservation-service/app/payloads"
	gomock "go.uber.org/mock/gomock"
)

// MockGenreService is a mock of GenreService interface.
type MockGenreService struct {
	ctrl     *gomock.Controller
	recorder *MockGenreServiceMockRecorder
}

// MockGenreServiceMockRecorder is the mock recorder for MockGenreService.
type MockGenreServiceMockRecorder struct {
	mock *MockGenreService
}

// NewMockGenreService creates a new mock instance.
func NewMockGenreService(ctrl *gomock.Controller) *MockGenreService {
	mock := &MockGenreService{ctrl: ctrl}
	mock.recorder = &MockGenreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenreService) EXPECT() *MockGenreServiceMockRecorder {
	return m.recorder
}

// CreateGenre mocks base method.
func (m *MockGenreService) CreateGenre(req payloads.CreateGenreRequest) (*models.Genre, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", req)
	ret0, _ := ret[0].(*models.Genre)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockGenreServiceMockRecorder) CreateGenre(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockGenreService)(nil).CreateGenre), req)
}

// GetGenre mocks base method.
func (m *MockGenreService) GetGenre(id uuid.UUID) (*models.Genre, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenre", id)
	ret0, _ := ret[0].(*models.Genre)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// GetGenre indicates an expected call of GetGenre.
func (mr *MockGenreServiceMockRecorder) GetGenre(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenre", reflect.TypeOf((*MockGenreService)(nil).GetGenre), id)
}

// GetGenres mocks base method.
func (m *MockGenreService) GetGenres() ([]*models.Genre, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres")
	ret0, _ := ret[0].([]*models.Genre)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres.
func (mr *MockGenreServiceMockRecorder) GetGenres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockGenreService)(nil).GetGenres))
}

// UpdateGenre mocks base method.
func (m *MockGenreService) UpdateGenre(id uuid.UUID, req payloads.UpdateGenreRequest) (*models.Genre, *errors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", id, req)
	ret0, _ := ret[0].(*models.Genre)
	ret1, _ := ret[1].(*errors.ApiError)
	return ret0, ret1
}

// UpdateGenre indicates an expected call of UpdateGenre.
func (mr *MockGenreServiceMockRecorder) UpdateGenre(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockGenreService)(nil).UpdateGenre), id, req)
}

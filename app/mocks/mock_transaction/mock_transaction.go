// Code generated by MockGen. DO NOT EDIT.
// Source: app/transaction/transaction.go
//
// Generated by this command:
//
//	mockgen -source=app/transaction/transaction.go -destination=app/mocks/mock_transaction/mock_transaction.go -package=mock_transaction
//

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	reflect "reflect"

	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTransactionManager is a mock of TransactionManager interface.
type MockTransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionManagerMockRecorder
}

// MockTransactionManagerMockRecorder is the mock recorder for MockTransactionManager.
type MockTransactionManagerMockRecorder struct {
	mock *MockTransactionManager
}

// NewMockTransactionManager creates a new mock instance.
func NewMockTransactionManager(ctrl *gomock.Controller) *MockTransactionManager {
	mock := &MockTransactionManager{ctrl: ctrl}
	mock.recorder = &MockTransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionManager) EXPECT() *MockTransactionManagerMockRecorder {
	return m.recorder
}

// ExecuteInRedisTransaction mocks base method.
func (m *MockTransactionManager) ExecuteInRedisTransaction(rdb *redis.Client, fn func(*redis.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteInRedisTransaction", rdb, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteInRedisTransaction indicates an expected call of ExecuteInRedisTransaction.
func (mr *MockTransactionManagerMockRecorder) ExecuteInRedisTransaction(rdb, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteInRedisTransaction", reflect.TypeOf((*MockTransactionManager)(nil).ExecuteInRedisTransaction), rdb, fn)
}

// ExecuteInTransaction mocks base method.
func (m *MockTransactionManager) ExecuteInTransaction(db *gorm.DB, fn func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteInTransaction", db, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteInTransaction indicates an expected call of ExecuteInTransaction.
func (mr *MockTransactionManagerMockRecorder) ExecuteInTransaction(db, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteInTransaction", reflect.TypeOf((*MockTransactionManager)(nil).ExecuteInTransaction), db, fn)
}

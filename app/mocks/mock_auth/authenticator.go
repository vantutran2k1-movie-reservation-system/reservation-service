// Code generated by MockGen. DO NOT EDIT.
// Source: app/auth/authenticator.go
//
// Generated by this command:
//
//	mockgen -source=app/auth/authenticator.go -destination=app/mocks/mock_auth/authenticator.go -package=mock_auth
//

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// DoPasswordsMatch mocks base method.
func (m *MockAuthenticator) DoPasswordsMatch(hashedPassword, rawPassword string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoPasswordsMatch", hashedPassword, rawPassword)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DoPasswordsMatch indicates an expected call of DoPasswordsMatch.
func (mr *MockAuthenticatorMockRecorder) DoPasswordsMatch(hashedPassword, rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoPasswordsMatch", reflect.TypeOf((*MockAuthenticator)(nil).DoPasswordsMatch), hashedPassword, rawPassword)
}

// GenerateHashedPassword mocks base method.
func (m *MockAuthenticator) GenerateHashedPassword(rawPassword string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashedPassword", rawPassword)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashedPassword indicates an expected call of GenerateHashedPassword.
func (mr *MockAuthenticatorMockRecorder) GenerateHashedPassword(rawPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashedPassword", reflect.TypeOf((*MockAuthenticator)(nil).GenerateHashedPassword), rawPassword)
}

// GenerateToken mocks base method.
func (m *MockAuthenticator) GenerateToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthenticatorMockRecorder) GenerateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthenticator)(nil).GenerateToken))
}
